import { BOOTH } from "./js/booth.js";
import { BigInt } from "./js/jscrypto/bigint.js";
import { USE_SJCL } from "./js/jscrypto/bigint.js";
import { sjcl } from "./js/jscrypto/sjcl.js";
import { BigIntDummy } from "./js/jscrypto/bigintDummy.js";

export class BoothPsifos {
  /** Class in charge of handling the Helios BOOTH */

  constructor(election_data, election_metadata) {
    if (USE_SJCL) {
      sjcl.random.startCollectors();
    }

    // // we're asynchronous if we have SJCL and Worker
    BOOTH.synchronous = !(USE_SJCL && window.Worker);

    // // we do in the browser only if it's asynchronous
    BigInt.in_browser = !BOOTH.synchronous;

    // // set up dummy bigint for fast parsing and serialization
    if (!BigInt.in_browser) BigInt = BigIntDummy;

    //BigInt.setup(BOOTH.so_lets_go, BOOTH.nojava);

    BOOTH.election_metadata = election_metadata;
    BOOTH.setup_election(election_data, election_metadata);
  }

  getBooth() {
    return BOOTH;
  }

  validateAllQuestions(answersQuestions) {
    /**
     * validate all questions with BOOTH
     * @param {array} answersQuestions
     *
     */
    for (let i = 0; i < answersQuestions.length; i++) {
      BOOTH.validate_question(i);
    }
  }

  encrypt(answersQuestions) {
    /**
     * Create encryp answers
     */

    BOOTH.ballot.answers = answersQuestions;
    BOOTH.ballot.open_answers = [];
    this.validateAllQuestions(answersQuestions);
    BOOTH.seal_ballot();
    const result = JSON.stringify({
      encrypted_vote: BOOTH.encrypted_vote_json,
    });
    const blob = new Blob([result], { type: "text/plain" });
    const a = document.createElement("a");
    a.style.display = "none";
    a.href = window.URL.createObjectURL(blob);
    a.download = "datos.json";
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(a.href);
    document.body.removeChild(a);
    document.getElementById("encrypt").innerHTML = result;
  }
}
export default BoothPsifos;

const election_data = JSON.stringify({
  public_key:
    '{"y": "13796896451334891600029571493921205991155070628658427160134993621076494776080063432778115858508002358349874811512262310055571431469384973048142995061337131353254179092462231899214050577061629922545003759400436597283958825877861005451577012862909910244226995783704281564080941046957473570068810531137360781084664659735715023753870550282085585824483868938298152061932101789432092346674932061332510722797404901889574326923908798084833490650604067110529550086263067104191248814791471133859541900867226204699959330956465036505626469255692740439328006899471640909830786379283123289351713823479808517299108729937089281929445703197870359376029852096950203169450746077664630510603847872865839294143063472496177246773475517237716818453139071165248499237768798645778542239423770105735665497742107893279112416204376305976532948985096000254258075006779624858829602372095101546584370193489156820157015779323682073237132345729726724575053701472122507934659927849674161444913956618916738944398570191606157539369098138131118610653280531568126477951053646725333416420854639173916422976861999575480979950435711651765059499761893187546369749018951559499274828910443294468598303058234129623133538378326307712719841969899785564029121988899062429947892245696672251219159069987103410313929775946122353070195058100655227279622742867538114345705173079292265423489377231025515774656715320077094207377785885407185854145979656730998769884245013805106172919218410573999416705398369078911654395566629876978745134655461493562427526131174891304420274942606450396734256256983848556959798812807793523439850879686654134527798684454899937849513407565003767129997083959789990002248454344744810541222398344611126751240149976013342368889100834027061320272597212014199285904984031931722025051414910100053905048594811526666223617849301834258474093392408477542402027960606873783569120734056", "p": "18327991482361669004286639798074385949400820527508693038281793842419658778646183172043714372434887662397495316046424276660244274945405969876809123683433321250545108479986526816070819839957965107425628145736191837131508884754895750146570877651437107861199128784596337922813704126294239514133764359696513958683035290336886031265046191900273191001058569366746816268635864575581741352326134814483409332935713546125268177796076176035462970215700537486727982100562697116663646391349282042978452419214916303106449995547276153571886404788957113873880035926652300634390083324146443946720486724627744466059746347363887763313743", "g": "16141898911809788492463153022431594386168319330222751768493351040952735565361896626024447515650922389607562504530451845501876091151301288417170631825455184588835325157781438398677204184012389811003436159787883489522402724138691780356199397916889317025148963039437773815193899568773625897337438669015395689510555217519657274498167109193026516201153157184411632736242491162216511771478776845530382144041894008864963974005512677070493327538989029656740352284939727572199971495877462619563754716116212378070273900583647050080189064355617936261153568358447985978219381341970181603196085481796711486639560779759080607611174", "q": "9163995741180834502143319899037192974700410263754346519140896921209829389323091586021857186217443831198747658023212138330122137472702984938404561841716660625272554239993263408035409919978982553712814072868095918565754442377447875073285438825718553930599564392298168961406852063147119757066882179848256979341517645168443015632523095950136595500529284683373408134317932287790870676163067407241704666467856773062634088898038088017731485107850268743363991050281348558331823195674641021489226209607458151553224997773638076785943202394478556936940017963326150317195041662073221973360243362313872233029873173681943881656871"}',
  questions: '[{"q_type": "closed_question", "total_closed_options": 5}]',
});

const booth = new BoothPsifos(election_data, election_data);
booth.encrypt([0, 1, 0, 0, 0]);
